/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MonokumaInterface extends utils.Interface {
  functions: {
    "DEAD()": FunctionFragment;
    "_hasLiqBeenAdded()": FunctionFragment;
    "_ratios()": FunctionFragment;
    "_taxRates()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveContractContingency()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "contractSwapEnabled()": FunctionFragment;
    "decimals()": FunctionFragment;
    "dexRouter()": FunctionFragment;
    "excludePresaleAddresses(address,address)": FunctionFragment;
    "getCirculatingSupply()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getTokenAmountAtPriceImpact(uint256)": FunctionFragment;
    "isBlacklisted(address)": FunctionFragment;
    "isExcludedFromFees(address)": FunctionFragment;
    "isExcludedFromProtection(address)": FunctionFragment;
    "launchStamp()": FunctionFragment;
    "lpBurnEnabled()": FunctionFragment;
    "lpBurnPercent()": FunctionFragment;
    "lpBurnTimeLimit()": FunctionFragment;
    "lpPair()": FunctionFragment;
    "marketingWallet()": FunctionFragment;
    "maxBuyTaxes()": FunctionFragment;
    "maxRoundtripTax()": FunctionFragment;
    "maxSellTaxes()": FunctionFragment;
    "maxTransferTaxes()": FunctionFragment;
    "multiSendTokens(address[],uint256[])": FunctionFragment;
    "name()": FunctionFragment;
    "piContractSwapsEnabled()": FunctionFragment;
    "piSwapPercent()": FunctionFragment;
    "removeBlacklisted(address)": FunctionFragment;
    "removeSniper(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBlacklistEnabled(address,bool)": FunctionFragment;
    "setBlacklistEnabledMultiple(address[],bool)": FunctionFragment;
    "setContractSwapEnabled(bool,bool)": FunctionFragment;
    "setExcludedFromFees(address,bool)": FunctionFragment;
    "setExcludedFromProtection(address,bool)": FunctionFragment;
    "setInitializer(address)": FunctionFragment;
    "setLpBurnEnabled(bool)": FunctionFragment;
    "setLpBurnPercent(uint256)": FunctionFragment;
    "setLpBurnTimeLimit(uint256)": FunctionFragment;
    "setLpPair(address,bool)": FunctionFragment;
    "setNewRouter(address)": FunctionFragment;
    "setPriceImpactSwapAmount(uint256)": FunctionFragment;
    "setProtectionSettings(bool,bool)": FunctionFragment;
    "setSwapSettings(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setWallets(address)": FunctionFragment;
    "swapAmount()": FunctionFragment;
    "swapThreshold()": FunctionFragment;
    "sweepContingency()": FunctionFragment;
    "sweepExternalTokens(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tradingEnabled()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwner(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEAD"
      | "_hasLiqBeenAdded"
      | "_ratios"
      | "_taxRates"
      | "allowance"
      | "approve"
      | "approveContractContingency"
      | "balanceOf"
      | "contractSwapEnabled"
      | "decimals"
      | "dexRouter"
      | "excludePresaleAddresses"
      | "getCirculatingSupply"
      | "getOwner"
      | "getTokenAmountAtPriceImpact"
      | "isBlacklisted"
      | "isExcludedFromFees"
      | "isExcludedFromProtection"
      | "launchStamp"
      | "lpBurnEnabled"
      | "lpBurnPercent"
      | "lpBurnTimeLimit"
      | "lpPair"
      | "marketingWallet"
      | "maxBuyTaxes"
      | "maxRoundtripTax"
      | "maxSellTaxes"
      | "maxTransferTaxes"
      | "multiSendTokens"
      | "name"
      | "piContractSwapsEnabled"
      | "piSwapPercent"
      | "removeBlacklisted"
      | "removeSniper"
      | "renounceOwnership"
      | "setBlacklistEnabled"
      | "setBlacklistEnabledMultiple"
      | "setContractSwapEnabled"
      | "setExcludedFromFees"
      | "setExcludedFromProtection"
      | "setInitializer"
      | "setLpBurnEnabled"
      | "setLpBurnPercent"
      | "setLpBurnTimeLimit"
      | "setLpPair"
      | "setNewRouter"
      | "setPriceImpactSwapAmount"
      | "setProtectionSettings"
      | "setSwapSettings"
      | "setWallets"
      | "swapAmount"
      | "swapThreshold"
      | "sweepContingency"
      | "sweepExternalTokens"
      | "symbol"
      | "totalSupply"
      | "tradingEnabled"
      | "transfer"
      | "transferFrom"
      | "transferOwner"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DEAD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_hasLiqBeenAdded",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_ratios", values?: undefined): string;
  encodeFunctionData(functionFragment: "_taxRates", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveContractContingency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractSwapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "dexRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "excludePresaleAddresses",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCirculatingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenAmountAtPriceImpact",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromProtection",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "launchStamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lpBurnEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lpBurnPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lpBurnTimeLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpPair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketingWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxBuyTaxes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRoundtripTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSellTaxes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTransferTaxes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiSendTokens",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "piContractSwapsEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "piSwapPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeBlacklisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSniper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBlacklistEnabled",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlacklistEnabledMultiple",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractSwapEnabled",
    values: [PromiseOrValue<boolean>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExcludedFromFees",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExcludedFromProtection",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitializer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLpBurnEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLpBurnPercent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLpBurnTimeLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLpPair",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceImpactSwapAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtectionSettings",
    values: [PromiseOrValue<boolean>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapSettings",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWallets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweepContingency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweepExternalTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwner",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "DEAD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_hasLiqBeenAdded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_ratios", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_taxRates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveContractContingency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dexRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludePresaleAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCirculatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmountAtPriceImpact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromProtection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpBurnEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpBurnPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpBurnTimeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBuyTaxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRoundtripTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSellTaxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTransferTaxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSendTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "piContractSwapsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "piSwapPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSniper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlacklistEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlacklistEnabledMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExcludedFromProtection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitializer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLpBurnEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLpBurnPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLpBurnTimeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLpPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNewRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceImpactSwapAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtectionSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWallets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepContingency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepExternalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwner",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AutoLiquify(uint256,uint256)": EventFragment;
    "ContractSwapEnabledUpdated(bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AutoLiquify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractSwapEnabledUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface AutoLiquifyEventObject {
  amountCurrency: BigNumber;
  amountTokens: BigNumber;
}
export type AutoLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber],
  AutoLiquifyEventObject
>;

export type AutoLiquifyEventFilter = TypedEventFilter<AutoLiquifyEvent>;

export interface ContractSwapEnabledUpdatedEventObject {
  enabled: boolean;
}
export type ContractSwapEnabledUpdatedEvent = TypedEvent<
  [boolean],
  ContractSwapEnabledUpdatedEventObject
>;

export type ContractSwapEnabledUpdatedEventFilter =
  TypedEventFilter<ContractSwapEnabledUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Monokuma extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MonokumaInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEAD(overrides?: CallOverrides): Promise<[string]>;

    _hasLiqBeenAdded(overrides?: CallOverrides): Promise<[boolean]>;

    _ratios(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        liquidity: number;
        marketing: number;
        totalSwap: number;
      }
    >;

    _taxRates(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        buyFee: number;
        sellFee: number;
        transferFee: number;
      }
    >;

    allowance(
      holder: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveContractContingency(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contractSwapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    dexRouter(overrides?: CallOverrides): Promise<[string]>;

    excludePresaleAddresses(
      router: PromiseOrValue<string>,
      presale: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCirculatingSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getTokenAmountAtPriceImpact(
      priceImpactInHundreds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isBlacklisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExcludedFromFees(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExcludedFromProtection(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    launchStamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpBurnEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    lpBurnPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpBurnTimeLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpPair(overrides?: CallOverrides): Promise<[string]>;

    marketingWallet(overrides?: CallOverrides): Promise<[string]>;

    maxBuyTaxes(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRoundtripTax(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSellTaxes(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTransferTaxes(overrides?: CallOverrides): Promise<[BigNumber]>;

    multiSendTokens(
      accounts: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    piContractSwapsEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    piSwapPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeBlacklisted(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeSniper(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlacklistEnabled(
      account: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlacklistEnabledMultiple(
      accounts: PromiseOrValue<string>[],
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContractSwapEnabled(
      swapEnabled: PromiseOrValue<boolean>,
      priceImpactSwapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExcludedFromFees(
      account: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExcludedFromProtection(
      account: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInitializer(
      initializer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLpBurnEnabled(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLpBurnPercent(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLpBurnTimeLimit(
      timeInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLpPair(
      pair: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNewRouter(
      newRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceImpactSwapAmount(
      priceImpactSwapPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtectionSettings(
      _antiSnipe: PromiseOrValue<boolean>,
      _antiBlock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapSettings(
      thresholdPercent: PromiseOrValue<BigNumberish>,
      thresholdDivisor: PromiseOrValue<BigNumberish>,
      amountPercent: PromiseOrValue<BigNumberish>,
      amountDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWallets(
      marketing: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    sweepContingency(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sweepExternalTokens(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEAD(overrides?: CallOverrides): Promise<string>;

  _hasLiqBeenAdded(overrides?: CallOverrides): Promise<boolean>;

  _ratios(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      liquidity: number;
      marketing: number;
      totalSwap: number;
    }
  >;

  _taxRates(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      buyFee: number;
      sellFee: number;
      transferFee: number;
    }
  >;

  allowance(
    holder: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveContractContingency(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contractSwapEnabled(overrides?: CallOverrides): Promise<boolean>;

  decimals(overrides?: CallOverrides): Promise<number>;

  dexRouter(overrides?: CallOverrides): Promise<string>;

  excludePresaleAddresses(
    router: PromiseOrValue<string>,
    presale: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getTokenAmountAtPriceImpact(
    priceImpactInHundreds: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isBlacklisted(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExcludedFromFees(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExcludedFromProtection(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  launchStamp(overrides?: CallOverrides): Promise<BigNumber>;

  lpBurnEnabled(overrides?: CallOverrides): Promise<boolean>;

  lpBurnPercent(overrides?: CallOverrides): Promise<BigNumber>;

  lpBurnTimeLimit(overrides?: CallOverrides): Promise<BigNumber>;

  lpPair(overrides?: CallOverrides): Promise<string>;

  marketingWallet(overrides?: CallOverrides): Promise<string>;

  maxBuyTaxes(overrides?: CallOverrides): Promise<BigNumber>;

  maxRoundtripTax(overrides?: CallOverrides): Promise<BigNumber>;

  maxSellTaxes(overrides?: CallOverrides): Promise<BigNumber>;

  maxTransferTaxes(overrides?: CallOverrides): Promise<BigNumber>;

  multiSendTokens(
    accounts: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  piContractSwapsEnabled(overrides?: CallOverrides): Promise<boolean>;

  piSwapPercent(overrides?: CallOverrides): Promise<BigNumber>;

  removeBlacklisted(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeSniper(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlacklistEnabled(
    account: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlacklistEnabledMultiple(
    accounts: PromiseOrValue<string>[],
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContractSwapEnabled(
    swapEnabled: PromiseOrValue<boolean>,
    priceImpactSwapEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExcludedFromFees(
    account: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExcludedFromProtection(
    account: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInitializer(
    initializer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLpBurnEnabled(
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLpBurnPercent(
    percent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLpBurnTimeLimit(
    timeInSeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLpPair(
    pair: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNewRouter(
    newRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceImpactSwapAmount(
    priceImpactSwapPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtectionSettings(
    _antiSnipe: PromiseOrValue<boolean>,
    _antiBlock: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapSettings(
    thresholdPercent: PromiseOrValue<BigNumberish>,
    thresholdDivisor: PromiseOrValue<BigNumberish>,
    amountPercent: PromiseOrValue<BigNumberish>,
    amountDivisor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWallets(
    marketing: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapAmount(overrides?: CallOverrides): Promise<BigNumber>;

  swapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  sweepContingency(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sweepExternalTokens(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  tradingEnabled(overrides?: CallOverrides): Promise<boolean>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEAD(overrides?: CallOverrides): Promise<string>;

    _hasLiqBeenAdded(overrides?: CallOverrides): Promise<boolean>;

    _ratios(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        liquidity: number;
        marketing: number;
        totalSwap: number;
      }
    >;

    _taxRates(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        buyFee: number;
        sellFee: number;
        transferFee: number;
      }
    >;

    allowance(
      holder: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveContractContingency(overrides?: CallOverrides): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractSwapEnabled(overrides?: CallOverrides): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    dexRouter(overrides?: CallOverrides): Promise<string>;

    excludePresaleAddresses(
      router: PromiseOrValue<string>,
      presale: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getTokenAmountAtPriceImpact(
      priceImpactInHundreds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBlacklisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFees(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromProtection(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    launchStamp(overrides?: CallOverrides): Promise<BigNumber>;

    lpBurnEnabled(overrides?: CallOverrides): Promise<boolean>;

    lpBurnPercent(overrides?: CallOverrides): Promise<BigNumber>;

    lpBurnTimeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    lpPair(overrides?: CallOverrides): Promise<string>;

    marketingWallet(overrides?: CallOverrides): Promise<string>;

    maxBuyTaxes(overrides?: CallOverrides): Promise<BigNumber>;

    maxRoundtripTax(overrides?: CallOverrides): Promise<BigNumber>;

    maxSellTaxes(overrides?: CallOverrides): Promise<BigNumber>;

    maxTransferTaxes(overrides?: CallOverrides): Promise<BigNumber>;

    multiSendTokens(
      accounts: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    piContractSwapsEnabled(overrides?: CallOverrides): Promise<boolean>;

    piSwapPercent(overrides?: CallOverrides): Promise<BigNumber>;

    removeBlacklisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSniper(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBlacklistEnabled(
      account: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlacklistEnabledMultiple(
      accounts: PromiseOrValue<string>[],
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractSwapEnabled(
      swapEnabled: PromiseOrValue<boolean>,
      priceImpactSwapEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExcludedFromFees(
      account: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExcludedFromProtection(
      account: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitializer(
      initializer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLpBurnEnabled(
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLpBurnPercent(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLpBurnTimeLimit(
      timeInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLpPair(
      pair: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewRouter(
      newRouter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceImpactSwapAmount(
      priceImpactSwapPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtectionSettings(
      _antiSnipe: PromiseOrValue<boolean>,
      _antiBlock: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapSettings(
      thresholdPercent: PromiseOrValue<BigNumberish>,
      thresholdDivisor: PromiseOrValue<BigNumberish>,
      amountPercent: PromiseOrValue<BigNumberish>,
      amountDivisor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWallets(
      marketing: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAmount(overrides?: CallOverrides): Promise<BigNumber>;

    swapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    sweepContingency(overrides?: CallOverrides): Promise<void>;

    sweepExternalTokens(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingEnabled(overrides?: CallOverrides): Promise<boolean>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "AutoLiquify(uint256,uint256)"(
      amountCurrency?: null,
      amountTokens?: null
    ): AutoLiquifyEventFilter;
    AutoLiquify(
      amountCurrency?: null,
      amountTokens?: null
    ): AutoLiquifyEventFilter;

    "ContractSwapEnabledUpdated(bool)"(
      enabled?: null
    ): ContractSwapEnabledUpdatedEventFilter;
    ContractSwapEnabledUpdated(
      enabled?: null
    ): ContractSwapEnabledUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    DEAD(overrides?: CallOverrides): Promise<BigNumber>;

    _hasLiqBeenAdded(overrides?: CallOverrides): Promise<BigNumber>;

    _ratios(overrides?: CallOverrides): Promise<BigNumber>;

    _taxRates(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      holder: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveContractContingency(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractSwapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    dexRouter(overrides?: CallOverrides): Promise<BigNumber>;

    excludePresaleAddresses(
      router: PromiseOrValue<string>,
      presale: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAmountAtPriceImpact(
      priceImpactInHundreds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBlacklisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExcludedFromFees(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExcludedFromProtection(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    launchStamp(overrides?: CallOverrides): Promise<BigNumber>;

    lpBurnEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    lpBurnPercent(overrides?: CallOverrides): Promise<BigNumber>;

    lpBurnTimeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    lpPair(overrides?: CallOverrides): Promise<BigNumber>;

    marketingWallet(overrides?: CallOverrides): Promise<BigNumber>;

    maxBuyTaxes(overrides?: CallOverrides): Promise<BigNumber>;

    maxRoundtripTax(overrides?: CallOverrides): Promise<BigNumber>;

    maxSellTaxes(overrides?: CallOverrides): Promise<BigNumber>;

    maxTransferTaxes(overrides?: CallOverrides): Promise<BigNumber>;

    multiSendTokens(
      accounts: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    piContractSwapsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    piSwapPercent(overrides?: CallOverrides): Promise<BigNumber>;

    removeBlacklisted(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeSniper(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlacklistEnabled(
      account: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlacklistEnabledMultiple(
      accounts: PromiseOrValue<string>[],
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContractSwapEnabled(
      swapEnabled: PromiseOrValue<boolean>,
      priceImpactSwapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExcludedFromFees(
      account: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExcludedFromProtection(
      account: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInitializer(
      initializer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLpBurnEnabled(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLpBurnPercent(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLpBurnTimeLimit(
      timeInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLpPair(
      pair: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNewRouter(
      newRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceImpactSwapAmount(
      priceImpactSwapPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtectionSettings(
      _antiSnipe: PromiseOrValue<boolean>,
      _antiBlock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapSettings(
      thresholdPercent: PromiseOrValue<BigNumberish>,
      thresholdDivisor: PromiseOrValue<BigNumberish>,
      amountPercent: PromiseOrValue<BigNumberish>,
      amountDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWallets(
      marketing: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapAmount(overrides?: CallOverrides): Promise<BigNumber>;

    swapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    sweepContingency(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sweepExternalTokens(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEAD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _hasLiqBeenAdded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _ratios(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _taxRates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      holder: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveContractContingency(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractSwapEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dexRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludePresaleAddresses(
      router: PromiseOrValue<string>,
      presale: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCirculatingSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenAmountAtPriceImpact(
      priceImpactInHundreds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBlacklisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExcludedFromFees(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExcludedFromProtection(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    launchStamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpBurnEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpBurnPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpBurnTimeLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketingWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxBuyTaxes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRoundtripTax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSellTaxes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTransferTaxes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiSendTokens(
      accounts: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    piContractSwapsEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    piSwapPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeBlacklisted(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeSniper(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlacklistEnabled(
      account: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlacklistEnabledMultiple(
      accounts: PromiseOrValue<string>[],
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContractSwapEnabled(
      swapEnabled: PromiseOrValue<boolean>,
      priceImpactSwapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExcludedFromFees(
      account: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExcludedFromProtection(
      account: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInitializer(
      initializer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLpBurnEnabled(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLpBurnPercent(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLpBurnTimeLimit(
      timeInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLpPair(
      pair: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNewRouter(
      newRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceImpactSwapAmount(
      priceImpactSwapPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtectionSettings(
      _antiSnipe: PromiseOrValue<boolean>,
      _antiBlock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapSettings(
      thresholdPercent: PromiseOrValue<BigNumberish>,
      thresholdDivisor: PromiseOrValue<BigNumberish>,
      amountPercent: PromiseOrValue<BigNumberish>,
      amountDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWallets(
      marketing: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweepContingency(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sweepExternalTokens(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
